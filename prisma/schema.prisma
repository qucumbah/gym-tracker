generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workout {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name String
  time DateTime @default(now())

  trainingSets TrainingSet[]

  @@unique([id, userId])
}

model TrainingSet {
  id String @id @default(cuid())

  workoutId String
  workout   Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  load Float
  reps Int

  @@unique([id, userId])
  @@index([workoutId])
}

model Exercise {
  id   String @id @default(cuid())
  name String

  trainingSets TrainingSet[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  workouts      Workout[]
  TrainingSet   TrainingSet[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
